import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { MoreVertical, Edit, Copy, Trash2 } from "lucide-react";
import Card from "../../../components/ui/Card";
import Button from "../../../components/ui/Button";
import Badge from "../../../components/ui/Badge";
import type { Product } from "../../Dashboard/mockData";

interface ProductCardProps {
  product: Product;
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  const navigate = useNavigate();
  const [showMenu, setShowMenu] = useState(false);

  const handleEdit = () => {
    navigate(`/products/${product.id}`);
  };

  const handleEditCard = () => {
    navigate(`/editor/${product.id}`);
  };

  const handleDuplicate = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    console.log("–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç:", product.id);
  };

  const handleDelete = () => {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ
    console.log("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:", product.id);
  };

  const getStatusColor = (status: Product["status"]) => {
    switch (status) {
      case "active":
        return "bg-green-100 text-green-800";
      case "draft":
        return "bg-yellow-100 text-yellow-800";
      case "trash":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusLabel = (status: Product["status"]) => {
    switch (status) {
      case "active":
        return "–ê–∫—Ç–∏–≤–Ω—ã–π";
      case "draft":
        return "–ß–µ—Ä–Ω–æ–≤–∏–∫";
      case "trash":
        return "–ö–æ—Ä–∑–∏–Ω–∞";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  return (
    <Card className="relative group hover:shadow-lg transition-shadow">
      {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
      <div className="h-48 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl mb-4 flex items-center justify-center">
        {product.image ? (
          <img 
            src={product.image} 
            alt={product.name}
            className="w-full h-full object-cover rounded-xl"
          />
        ) : (
          <div className="text-center">
            <div className="w-16 h-16 bg-primary-200 rounded-full mx-auto mb-2 flex items-center justify-center">
              <span className="text-2xl">üì¶</span>
            </div>
            <p className="text-sm text-gray-500">–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ */}
      <div className="space-y-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <h3 className="font-semibold text-lg mb-1 line-clamp-2">
              {product.name}
            </h3>
            <p className="text-sm text-gray-600 mb-2">
              {product.category}
            </p>
          </div>
          
          {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="relative">
            <Button
              onClick={() => setShowMenu(!showMenu)}
              className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
            >
              <MoreVertical size={16} />
            </Button>
            
            {showMenu && (
              <div className="absolute right-0 top-full mt-1 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-10">
                <div className="py-1">
                  <button
                    onClick={handleEdit}
                    className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <Edit size={14} />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç
                  </button>
                  <button
                    onClick={handleEditCard}
                    className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <Edit size={14} />
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                  </button>
                  <button
                    onClick={handleDuplicate}
                    className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <Copy size={14} />
                    –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button
                    onClick={handleDelete}
                    className="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center gap-2 text-red-600"
                  >
                    <Trash2 size={14} />
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="flex items-center justify-between text-sm text-gray-500">
          <span>{product.items} —Ç–æ–≤–∞—Ä–æ–≤</span>
          <span>{product.cards} –∫–∞—Ä—Ç–æ—á–µ–∫</span>
        </div>

        {/* –°—Ç–∞—Ç—É—Å */}
        <div className="flex items-center justify-between">
          <Badge className={getStatusColor(product.status)}>
            {getStatusLabel(product.status)}
          </Badge>
          <span className="text-xs text-gray-400">
            {product.lastEdit}
          </span>
        </div>
      </div>

      {/* –û–≤–µ—Ä–ª–µ–π –¥–ª—è –∫–ª–∏–∫–∞ */}
      <div 
        className="absolute inset-0 cursor-pointer"
        onClick={handleEdit}
        aria-label={`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ${product.name}`}
      />
    </Card>
  );
};

export default React.memo(ProductCard); 