import { z } from 'zod';

/**
 * Types
 */
export interface PasswordRequirement {
  id: string;
  label: string;
  regex: RegExp;
  met: boolean;
}

/**
 * Validation Schemas
 * –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

export const loginSchema = z.object({
  email: z
    .string()
    .min(1, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .email('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z
    .string()
    .min(1, '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  rememberMe: z.boolean().optional()
});

export const registerSchema = z.object({
  firstName: z
    .string()
    .min(2, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
    .max(50, '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤')
    .optional(),
  lastName: z
    .string()
    .min(2, '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞')
    .max(50, '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤')
    .optional(),
  email: z
    .string()
    .min(1, 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .email('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  password: z
    .string()
    .min(8, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
    .max(128, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 128 —Å–∏–º–≤–æ–ª–æ–≤')
    .regex(/[a-z]/, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É')
    .regex(/[A-Z]/, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É')
    .regex(/[0-9]/, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É')
    .regex(/[^a-zA-Z0-9]/, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª'),
  confirmPassword: z.string()
}).refine((data) => data.password === data.confirmPassword, {
  message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
  path: ['confirmPassword']
});

export type LoginFormData = z.infer<typeof loginSchema>;
export type RegisterFormData = z.infer<typeof registerSchema>;

/**
 * Password strength checker
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
 */
export const getPasswordRequirements = (password: string): PasswordRequirement[] => {
  return [
    {
      id: 'length',
      label: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤',
      regex: /.{8,}/,
      met: /.{8,}/.test(password)
    },
    {
      id: 'lowercase',
      label: '–û–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞',
      regex: /[a-z]/,
      met: /[a-z]/.test(password)
    },
    {
      id: 'uppercase',
      label: '–û–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞',
      regex: /[A-Z]/,
      met: /[A-Z]/.test(password)
    },
    {
      id: 'number',
      label: '–û–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞',
      regex: /[0-9]/,
      met: /[0-9]/.test(password)
    },
    {
      id: 'special',
      label: '–û–¥–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª',
      regex: /[^a-zA-Z0-9]/,
      met: /[^a-zA-Z0-9]/.test(password)
    }
  ];
};

/**
 * Calculate password strength
 * –†–∞—Å—á–µ—Ç —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è
 */
export const getPasswordStrength = (password: string): {
  score: number;
  label: string;
  color: string;
} => {
  const requirements = getPasswordRequirements(password);
  const metCount = requirements.filter(req => req.met).length;
  const score = (metCount / requirements.length) * 100;

  if (score === 0) {
    return { score: 0, label: '–û—á–µ–Ω—å —Å–ª–∞–±—ã–π', color: 'error' };
  } else if (score < 40) {
    return { score, label: '–°–ª–∞–±—ã–π', color: 'error' };
  } else if (score < 60) {
    return { score, label: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', color: 'warning' };
  } else if (score < 80) {
    return { score, label: '–•–æ—Ä–æ—à–∏–π', color: 'primary' };
  } else {
    return { score, label: '–û—Ç–ª–∏—á–Ω—ã–π', color: 'success' };
  }
};

/**
 * Token management utilities
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏
 */
export const tokenStorage = {
  get: (): string | null => {
    try {
      return localStorage.getItem('authToken');
    } catch {
      return null;
    }
  },
  
  set: (token: string): void => {
    try {
      localStorage.setItem('authToken', token);
    } catch (error) {
      console.error('Failed to save token:', error);
    }
  },
  
  remove: (): void => {
    try {
      localStorage.removeItem('authToken');
    } catch (error) {
      console.error('Failed to remove token:', error);
    }
  }
};

/**
 * User data management utilities
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const userStorage = {
  get: () => {
    try {
      const userData = localStorage.getItem('userData');
      return userData ? JSON.parse(userData) : null;
    } catch {
      return null;
    }
  },
  
  set: (user: any): void => {
    try {
      localStorage.setItem('userData', JSON.stringify(user));
    } catch (error) {
      console.error('Failed to save user data:', error);
    }
  },
  
  remove: (): void => {
    try {
      localStorage.removeItem('userData');
    } catch (error) {
      console.error('Failed to remove user data:', error);
    }
  }
};

/**
 * Social auth providers configuration
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export const socialProviders = [
  {
    id: 'google' as const,
    name: 'Google',
    icon: 'üîç'
  },
  {
    id: 'vk' as const,
    name: 'VK',
    icon: 'üì±'
  },
  {
    id: 'yandex' as const,
    name: '–Ø–Ω–¥–µ–∫—Å',
    icon: 'üî¥'
  }
];